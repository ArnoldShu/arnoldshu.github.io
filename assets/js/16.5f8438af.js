(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{340:function(t,v,_){"use strict";_.r(v);var r=_(4),n=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"执行引擎-execution-engine"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎-execution-engine"}},[t._v("#")]),t._v(" 执行引擎(Execution Engine)")]),t._v(" "),v("p",[v("strong",[t._v("执行引擎(Execution Engine)的作用")]),t._v(":将字节码指令解释/编译为对应平台的本地机器指令,简而言之,将高级语言转译成机器语言能被计算机识别")]),t._v(" "),v("p",[t._v("执行引擎的"),v("strong",[t._v("简单工作工程")])]),t._v(" "),v("ol",[v("li",[t._v("通过pc寄存器确定一条执行指令")]),t._v(" "),v("li",[t._v("执行完一条指令后,pc寄存器指向下一条指令地址")]),t._v(" "),v("li",[t._v("执行构成中可以通过存储在虚拟机栈中局部变量表（Local Variables）的对象引用定位到java堆中的对象实例信息.通过对象头中的元数据指针定位到目标对象的类型信息")])]),t._v(" "),v("h3",{attrs:{id:"java后端编译和执行的过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java后端编译和执行的过程"}},[t._v("#")]),t._v(" JAVA后端编译和执行的过程")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("名词解释")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("解释器(Interpreter)")]),t._v(" "),v("td",[t._v("java虚拟机对字节码采用逐行解释的方式执行,将字节码翻译为本地机器指令执行")])]),t._v(" "),v("tr",[v("td",[t._v("JIT编译器(just in time)")]),t._v(" "),v("td",[t._v("虚拟机将源代码直接编译成本地机器指令执行")])]),t._v(" "),v("tr",[v("td",[t._v("机器码")]),t._v(" "),v("td",[t._v("二进制编码方式表示的指令")])]),t._v(" "),v("tr",[v("td",[t._v("指令")]),t._v(" "),v("td",[t._v("把机器码中特定的0和1序列简化成对应的指令")])]),t._v(" "),v("tr",[v("td",[t._v("指令集")]),t._v(" "),v("td",[t._v("每个平台持有的指令集")])]),t._v(" "),v("tr",[v("td",[t._v("汇编语言")]),t._v(" "),v("td",[t._v("用助记符代替机器指令的操作码,用地址符号或标号代替指令或操作数的地址")])])])]),t._v(" "),v("ol",[v("li",[t._v("当程序需要迅速启动然后执行的时候，"),v("strong",[t._v("解释器")]),t._v("可以首先发挥作用，编译器不运行从而省去编译时间，立即执行程序")]),t._v(" "),v("li",[t._v("在程序运行后，随着时间的推移，"),v("strong",[t._v("编译器")]),t._v("逐渐发挥作用，把越来越多的代码编译成本地代码之后，可以获得更高的执行效率")]),t._v(" "),v("li",[t._v("当程序运行环境中内存资源限制较大（如部分嵌入式系统中），可以使用解释执行来节约内存；反之，则可以使用编译执行来提升效率。")]),t._v(" "),v("li",[t._v("同时，解释器还可以作为编译器（C2才会激进优化）激进优化时的一个“逃生门”，让编译器根据概率选择一些大多数时候都能提升运行速度的优化手段，当激进优化假设不成立。如：加载了新类后，类型继承结构出现变化，出现“罕见陷阱（Uncommon Trap）”时，可以通过逆优化（Deoptimization）退回到解释状态继续执行(部分没有解释器的虚拟机，也会采用不进行激进优化的C1编译器担任“逃生门”的角色)")])]),t._v(" "),v("h3",{attrs:{id:"对象的实例化内存布局与访问定位"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对象的实例化内存布局与访问定位"}},[t._v("#")]),t._v(" 对象的实例化内存布局与访问定位")]),t._v(" "),v("p",[t._v("常见创建对象的方式:")]),t._v(" "),v("ul",[v("li",[t._v("new")]),t._v(" "),v("li",[t._v("Class.newInstance")]),t._v(" "),v("li",[t._v("Contructor.newInstance")]),t._v(" "),v("li",[t._v("clone")]),t._v(" "),v("li",[t._v("反序列化")]),t._v(" "),v("li",[t._v("第三方类库")])]),t._v(" "),v("p",[t._v("创建对象的步奏")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("判断对象对应的类是否加载,链接,初始化")])]),t._v(" "),v("li",[v("strong",[t._v("为对象分配内存")])]),t._v(" "),v("li",[v("strong",[t._v("处理并发安全步奏")])]),t._v(" "),v("li",[v("strong",[t._v("初始化分配到的空间")])]),t._v(" "),v("li",[v("strong",[t._v("设置对象的对象头")])]),t._v(" "),v("li",[v("strong",[t._v("执行init方法进行初始化")])])]),t._v(" "),v("p",[v("strong",[t._v("对象的内存布局")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("内容")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("对象头(Header)")])]),t._v(" "),v("td",[t._v("包含"),v("strong",[t._v("运行时元数据")]),t._v("(Mark Word)(元数据里面包含:哈希值,GC分代年龄,锁标志状态,线程持有的锁,偏向线程ID,偏向时间戳),"),v("strong",[t._v("类型指针")]),t._v("(指向类元数据InstanceClass,.getClass方法),如果"),v("strong",[t._v("对象是数组还有数组长度")])])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("实例数据(Instance Data)")])]),t._v(" "),v("td",[t._v("对象真正存储的有效信息,包括各种类型的字段信息")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("对齐补充(Padding)")])]),t._v(" "),v("td",[t._v("没有特殊含义,起到占位符的作用")])])])]),t._v(" "),v("p",[v("strong",[t._v("对象的访问定位")]),t._v("\n栈帧(reference)引用到堆区,堆区指针到方法区类实例信息")]),t._v(" "),v("p",[v("strong",[t._v("对象访问")]),t._v("的两种方式")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方式")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("句柄访问")])]),t._v(" "),v("td",[t._v("在堆中开辟句柄池,池中两个指针:对象实例数据指针指向堆中实例数据,对象类型数据指针指向方法区对象类型数据")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("直接指针(Hotspot)")])]),t._v(" "),v("td",[t._v("直接指向堆中对象实例数据,对象实例数据中包含类型数据指针指向方法区对象类型数据")])])])]),t._v(" "),v("h2",{attrs:{id:"字节码指令集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字节码指令集"}},[t._v("#")]),t._v(" 字节码指令集")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/github_35983163/article/details/52945845",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java字节码,指令集汇编(转载)"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=n.exports}}]);