(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{342:function(t,v,_){"use strict";_.r(v);var s=_(4),r=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"jvm类加载器-类装载子系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm类加载器-类装载子系统"}},[t._v("#")]),t._v(" JVM类加载器（类装载子系统）")]),t._v(" "),v("h3",{attrs:{id:"类的加载过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的加载过程"}},[t._v("#")]),t._v(" 类的加载过程")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/ArnoldShu/cdn/01.backend/011.Java/01114/4.png",alt:"类的加载过程"}}),t._v("\n类加载过程步骤:"),v("strong",[t._v("加载>链接(包含验证,准备,解析)>初始化>使用>卸载")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("加载（loading）")]),t._v(":通过类的"),v("strong",[t._v("全限定名")]),t._v("(全限定名 = 包名+类型,eg:java.lang.String)获取此类的字节流(此字节流可以是通过读取.class文件，也可以通过网络io流，或者其他压缩包等途径获取),将流代表的静态存储结构("),v("strong",[t._v(".class文件")]),t._v(")转化为"),v("strong",[t._v("方法区")]),t._v("(作为一个内存区域，类模板对象,jdk1.8以前永久代,1.8之后元空间)的运行时数据结构,在"),v("strong",[t._v("堆内存")]),t._v("中生成一个代表该类的java.lang."),v("strong",[t._v("class")]),t._v("对象,作为方法区这个类的各种数据的访问入口")]),t._v(" "),v("li",[v("strong",[t._v("链接（linking）")]),t._v("(包含"),v("strong",[t._v("验证(verification),准备(preparation),解析(resolution)")]),t._v(")")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("项目")]),t._v(" "),v("th",[t._v("具体流程")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("验证(verification)")])]),t._v(" "),v("td",[t._v("确保class文件的字节流符合虚拟机规范,确保安全以及正确,"),v("strong",[t._v("主要的验证方式")]),t._v(":"),v("strong",[t._v("文件格式验证")]),t._v("（魔数，版本，长度检查等）,"),v("strong",[t._v("元数据验证")]),t._v(","),v("strong",[t._v("字节码验证符号引用验证")]),t._v(";")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("准备(preparation)")])]),t._v(" "),v("td",[t._v("为"),v("strong",[t._v("类的静态变量")]),t._v("分配内存并且设置该类的"),v("strong",[t._v("默认初始值(零值)")]),t._v(", 可参考:"),v("a",{attrs:{href:"https://www.runoob.com/java/java-basic-datatypes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 基本数据类型"),v("OutboundLink")],1),t._v(";注意final修饰的变量即"),v("strong",[t._v("常量")]),t._v("在编译时刻就已经分配值了(在"),v("strong",[t._v("常量池")]),t._v(")（eg:public  final int value=123）,准备阶段显示赋值;")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("解析(resolution)")])]),t._v(" "),v("td",[t._v("将"),v("strong",[t._v("常量池")]),t._v("(jdk1.8元空间中)内的符号引用转换为"),v("strong",[t._v("直接引用")]),t._v("(内存地址),符号引用是一组用来描述所引用的目标,符号引用字面量形式定义在java虚拟机规范的class文件格式中；通俗的讲就是通过常量池的符号直接定位到代表该符号的真实文件的存储路径")])])])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("strong",[t._v("初始化（Initialization）"),v("strong",[t._v("初始化就是执行")]),t._v("类构造器方法")]),t._v("<"),v("strong",[t._v("clinit(class init)")]),t._v(">的过程,此方法是javac编译器自动收集类中"),v("strong",[t._v("所有类变量的赋值动作和静态代码块")]),t._v("中的语句合并而成,构造器方法中指令按语句的源文件中出现的顺序执行(idea 插件jclasslib查看字节码),"),v("strong",[t._v("clinit方法是类变量方法变量赋值才会产生,而类的构造器则在虚拟机下面会产生init方法")]),t._v("（只有类具有"),v("strong",[t._v("静态变量或者静态代码块")]),t._v("才会在字节码中生成clinit方法）,如果编译类具有父类，jvm会先保证父类的clinit方法执行完毕,再执行子类的clinit,虚拟机必须保证一个类clinit方法在多线程下被同步加锁 ，并且初始化是否需要执行也取决于类是否"),v("strong",[t._v("主动使用")]),t._v("，主动使用就执行初始化过程，"),v("strong",[t._v("被动使用")]),t._v("则不执行，可参考："),v("a",{attrs:{href:"https://blog.csdn.net/mweibiao/article/details/79516708",target:"_blank",rel:"noopener noreferrer"}},[t._v("类的主动使用被动使用"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("strong",[t._v("使用（Using）")]),t._v(" 开发过程中各种编码做的操作，new 一个实例，实例.方法等操作")]),t._v(" "),v("li",[v("strong",[t._v("卸载（Unloading）")]),t._v(" 在平常的日常开发过程中很难做到卸载，可参考:"),v("a",{attrs:{href:"https://blog.csdn.net/xorxos/article/details/80490240",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java类的卸载机制"),v("OutboundLink")],1)])]),t._v(" "),v("h3",{attrs:{id:"类加载器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[t._v("#")]),t._v(" 类加载器")]),t._v(" "),v("p",[v("strong",[t._v("类加载器")]),t._v("运用于类加载过程中的"),v("strong",[t._v("加载（loading）阶段")])]),t._v(" "),v("p",[t._v("jvm支持的两种类加载器:")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("引导累加载器(Bootstrap ClassLoader)")])]),t._v(" "),v("li",[v("strong",[t._v("自定义类加载器(User-Defined ClassLoader)")]),t._v(",jvm定义的自定义类加载器是所有派生与抽象类"),v("strong",[t._v("ClassLoader")]),t._v("的类加载器都统称为自定义类加载器")])]),t._v(" "),v("p",[t._v("我们常见的类加载器有三个:\n"),v("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/ArnoldShu/cdn/01.backend/011.Java/01114/5.png",alt:"常见的类加载器"}})]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("加载器")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("Bootstrap Class Loader")])]),t._v(" "),v("td",[t._v("引导累加载器,"),v("strong",[t._v("C/C++语言")]),t._v("实现,无法通过程序获取到,加载java的核心类库("),v("strong",[t._v("JAVA_HOME/jre/lib/rt.jar,resources.jar或sun.boot.class.path")]),t._v("路径下的内容,只加载"),v("strong",[t._v("java")]),t._v(","),v("strong",[t._v("javax")]),t._v(","),v("strong",[t._v("sun")]),t._v("开头的类)")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Extension Class Loader")])]),t._v(" "),v("td",[t._v("拓展类加载器,"),v("strong",[t._v("java语言")]),t._v("编写,由"),v("strong",[t._v("sun.misc.Launcher$ExtClassLoader")]),t._v("实现,从jdk的安装目录"),v("strong",[t._v("jre/lib/ext")]),t._v("子目录下加载类库")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("System Class Loader(AppClassLoader)")])]),t._v(" "),v("td",[t._v("系统类加载器,由"),v("strong",[t._v("sun.misc.Launcher$AppClassLoader")]),t._v("实现,负责加载环境变量"),v("strong",[t._v("java.class.path")]),t._v("指定的类库,"),v("strong",[t._v("用户自定义的类默认使用系统类加载器加载(程序编写类的默认加载器)")])])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("用户自定义类加载器")])]),t._v(" "),v("td",[t._v("定制加载方式,"),v("strong",[t._v("自定义存在的意义:隔离加载类,修改类加载方式,拓展加载源,防止源码泄露")]),t._v(",自定义类加载器的简单实现在jdk1.2之前通过继承抽象类"),v("strong",[t._v("java.lang.ClassLoader是一个抽象类,除引导类加载器都直接或间接继承")]),t._v("并重写loadClass方法,jdk1.2之后不再建议覆盖loadClass方法,建议把自定义的类加载逻辑写在"),v("strong",[t._v("findClass")]),t._v("方法中,如无较为复杂的逻辑可直接集成"),v("strong",[t._v("URLClassLoader")]),t._v("类")])])])]),t._v(" "),v("p",[t._v("类加载的"),v("strong",[t._v("双亲委派机制")]),t._v(":如果一个类加载器收到类加载请求,不会直接加载,而是委托给父类加载器加载,一直递归往父类委托,直到顶层的引导类加载器,递归加载到该类则直接返回,如果递归过程中一直未加载到该类,子加载器才会自己加载")]),t._v(" "),v("p",[v("strong",[t._v("双亲委派机制")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("优缺点")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("弊端")]),t._v(" "),v("td",[t._v("加载过程单向，顶层加载器无法候去底层加载器加载的")])]),t._v(" "),v("tr",[v("td",[t._v("优势")]),t._v(" "),v("td",[t._v("避免类的重复加载；保护程序安全,避免核心类库被篡改("),v("strong",[t._v("沙箱安全机制")]),t._v(")")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);